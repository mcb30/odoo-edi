"""IDoc Parser

Parse a SAP IDoc syntax description (as generated by SAP transaction
WE63) into an abstract syntax description.
"""

from warnings import warn_explicit
from ply import yacc
from .lexer import tokens  # pylint: disable=unused-import
from .model import Syntax


# Structural elements


def p_expression(p):
    """expression : document
    | record_section
    | segment_section
    | control_record
    | data_record
    | status_record
    | segment"""
    p[0] = p[1]


def p_document(p):
    """document : record_section segment_section"""
    p[0] = Syntax.Document(p[1], p[2])


def p_record_section(p):
    """record_section : BEGIN_RECORD_SECTION \
                        control_record data_record status_record \
                        END_RECORD_SECTION"""
    p[0] = Syntax.RecordSection(p[2], p[3], p[4])


def p_control_record(p):
    """control_record : BEGIN_CONTROL_RECORD fields_block END_CONTROL_RECORD"""
    p[0] = Syntax.ControlRecord(p[2])


def p_data_record(p):
    """data_record : BEGIN_DATA_RECORD fields_block END_DATA_RECORD"""
    p[0] = Syntax.DataRecord(p[2])


def p_status_record(p):
    """status_record : BEGIN_STATUS_RECORD fields_block END_STATUS_RECORD"""
    p[0] = Syntax.StatusRecord(p[2])


def p_segment_section(p):
    """segment_section : BEGIN_SEGMENT_SECTION idoc END_SEGMENT_SECTION"""
    p[0] = Syntax.SegmentSection(p[2])


def p_idoc(p):
    """idoc : BEGIN_IDOC STRING segments END_IDOC"""
    p[0] = Syntax.IDoc(p[2], p[3])


def p_segment(p):
    """segment : BEGIN_SEGMENT STRING segment_properties fields_block \
                 END_SEGMENT"""
    p[0] = Syntax.Segment(p[2], fields=p[4], **p[3])


def p_segment_group(p):
    """segment : BEGIN_GROUP NUMBER group_properties segments END_GROUP"""
    p[0] = Syntax.SegmentGroup(p[2], segments=p[4], **p[3])


def p_fields_block(p):
    """fields_block : BEGIN_FIELDS fields END_FIELDS"""
    p[0] = p[2]


def p_field(p):
    """field : NAME STRING field_properties"""
    p[0] = Syntax.Field(p[2], **p[3])


# Lists


def p_list_concat(p):
    """fields : fields field
    segments : segments segment"""
    p[0] = p[1]
    p[0].append(p[2])


def p_list_single(p):
    """fields : field
    segments : segment"""
    p[0] = [p[1]]


# Properties


def p_properties_concat(p):
    """field_properties : field_properties field_property
    segment_properties : segment_properties segment_property
    group_properties : group_properties group_property"""
    p[0] = p[1]
    if p[2][0] in p[0]:
        warn_explicit("Duplicate property '%s'" % p[2][0].upper(), SyntaxError, "", p.lexer.lineno)
        raise SyntaxError
    p[0][p[2][0]] = p[2][1]


def p_properties_single(p):
    """field_properties : field_property
    segment_properties : segment_property
    group_properties : group_property"""
    p[0] = {p[1][0]: p[1][1]}


def p_property_param(p):
    """field_property : TEXT STRING
                   | TYPE TYPENAME
                   | LENGTH NUMBER
                   | FIELD_POS NUMBER
                   | CHARACTER_FIRST NUMBER
                   | CHARACTER_LAST NUMBER
    segment_property : SEGMENTTYPE STRING
                     | LEVEL NUMBER
                     | STATUS REQUIREMENT
                     | LOOPMIN NUMBER
                     | LOOPMAX NUMBER
    group_property : LEVEL NUMBER
                   | STATUS REQUIREMENT
                   | LOOPMIN NUMBER
                   | LOOPMAX NUMBER"""
    p[0] = (p[1].lower(), p[2])


def p_property_flag(p):
    """segment_property : QUALIFIED"""
    p[0] = (p[1].lower(), True)


# Errors


def p_error(p):
    # pylint: disable=missing-docstring
    if p:
        warn_explicit("Unexpected token: %s" % p.value, SyntaxError, "", p.lineno)
    else:
        warn_explicit("Unexpected EOF", SyntaxError, "", 0)


parser = yacc.yacc(write_tables=False, debug=False)
